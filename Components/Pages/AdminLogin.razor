@page "/adminlogin"
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using OrderFlowManagementFrontend.Data;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<div class="form-wrapper d-flex align-items-center justify-content-center">
    <EditForm Model="@adminlogin" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div style="margin-top:30%">
            @if (flag1 == true)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@messageResponse</MudAlert>
            }

            @if (flag2 == true)
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">@messageResponse</MudAlert>
            }

            <MudItem xs="12" sm="7">
                <MudCard Style="width:25vw;">
                    <MudCardContent>


                        <MudTextField Label="Email" Class="mt-3"
                                      @bind-Value="adminlogin.email" For="@(() => adminlogin.email)" />


                        <MudTextField Label="Password" Class="mt-3"
                                      @bind-Value="adminlogin.password" For="@(() => adminlogin.password)" />




                    </MudCardContent>





                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Style="background-color:#FCA130; color:black">Login</MudButton>
                    </MudCardActions>


                </MudCard>
            </MudItem>

            <MudItem xs="12" Style="margin-top:20px;">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Not a Registered User <a href="/adminRegistration" style="color:blue">Sign up here!</a>
                </MudText>
            </MudItem>
        </div>

    </EditForm>
</div>

@code {
    AdminSignin adminlogin = new AdminSignin();
    bool flag1 = false;
    bool flag2 = false;
    string messageResponse = "skjfh";
    HttpClient httpClient = new HttpClient();
    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7122/loginadmin", adminlogin);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
                messageResponse = "Login successful";
                await LocalStorage.SetItemAsync("AdminId", result.id);
                await LocalStorage.SetItemAsync("JwtTokenAdmin", result.token);
                flag2 = !flag2;
                StateHasChanged();
                await Task.Delay(3000);
                Navigation.NavigateTo("/allorders");

            }
            else
            {
                messageResponse = "Incorrect Details";
                flag1 = !flag1;
                StateHasChanged();
                await Task.Delay(3000);
                flag1 = !flag1;
                StateHasChanged();
            }




        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error during submission: {ex.Message}");
        }
        StateHasChanged();
    }
}
