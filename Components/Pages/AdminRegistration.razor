@page "/adminRegistration"
@using OrderFlowManagementFrontend.Data;
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using MudBlazor
@inject NavigationManager Navigation
<div class="form-wrapper d-flex align-items-center justify-content-center">
    <EditForm Model="@adminSignup" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div>
            @if (flag1 == true)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@messageResponse</MudAlert>
            }

            @if (flag2 == true)
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">@messageResponse</MudAlert>
            }

            <MudItem xs="12" sm="7">
                <MudCard Style="width:25vw;">
                    <MudCardContent>
                        <MudTextField Label="Name"
                                      @bind-Value="adminSignup.Name" For="@(() => adminSignup.Name)" />
                        <MudTextField Label="Password" Class="mt-3"
                                      @bind-Value="adminSignup.Password" For="@(() => adminSignup.Password)" />
                        <MudTextField Label="Email" Class="mt-3"
                                      @bind-Value="adminSignup.Email" For="@(() => adminSignup.Email)" />

                        <MudTextField Label="Address" Class="mt-3"
                                      @bind-Value="adminSignup.Address" For="@(() => adminSignup.Address)" />


                        <MudTextField Label="Phone Number" Class="mt-3" HelperText="Max. 10 Digit"
                                      @bind-Value="adminSignup.PhoneNo" For="@(() => adminSignup.PhoneNo)" />





                    </MudCardContent>





                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Style="background-color:#FCA130; color:black">Register</MudButton>
                    </MudCardActions>


                </MudCard>
            </MudItem>

            <MudItem xs="12" Style="margin-top:20px;">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Already Registered? <a href="/adminlogin" style="color:blue;">SignIn here</a>
                </MudText>
            </MudItem>
        </div>

    </EditForm>
</div>


@code {
    AdminSignup adminSignup = new AdminSignup();
    bool flag1 = false;
    bool flag2 = false;
    string messageResponse = "skjdf";
    HttpClient httpClient = new HttpClient();
    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7122/addAdmin", adminSignup);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
                messageResponse = "Registration successful";
            //    await LocalStorage.SetItemAsync("AdminId", result.id);

                flag2 = !flag2;
                StateHasChanged();
               await Task.Delay(3000);
               Navigation.NavigateTo("/adminlogin");

            }
            else
            {
                messageResponse = "User Already Exist";
                flag1 = !flag1;
                StateHasChanged();
                await Task.Delay(3000);
                flag1 = !flag1;
                StateHasChanged();
            }




        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error during submission: {ex.Message}");
        }
        StateHasChanged();
    }

}
