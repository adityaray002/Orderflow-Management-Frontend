@page "/allorders"
@using System.Net.Http.Json
@using MudBlazor
@using OrderFlowManagementFrontend.Data
@inject AllOrderResponse allOrderResponse
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IDialogService Dialog
@inject NavigationManager NavigationManager
<MudTable Items="@allOrders" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AllOrders,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Orders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>OrderId</MudTh>
        <MudTh>Username</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Phone</MudTh>
        <MudTh>Item</MudTh>
        <MudTh>Status</MudTh>
        @* <MudTh>Message</MudTh> *@
    </HeaderContent>
    <RowTemplate>
             <MudTd DataLabel="OrderId">@context.id</MudTd> 
            <MudTd DataLabel="Username">@context.username</MudTd>
            <MudTd DataLabel="Email">@context.email</MudTd>
            <MudTd DataLabel="Date">@context.dateTime.ToShortDateString()</MudTd>
            <MudTd DataLabel="Address">@context.address</MudTd>
            <MudTd DataLabel="Phone">@context.phoneno</MudTd>
            <MudTd DataLabel="Item">@context.electronicItem</MudTd>
            <MudTd DataLabel="Status">@context.statusName</MudTd>
           @*  <MudTd DataLabel="Message">@context.messageInfo</MudTd> *@
        <MudButton OnClick="@(() => OpenDialogAsync(@context, _fullScreen))" Style="margin-top:10px; background-color:aquamarine;">
            Edit
        </MudButton>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.id</MudText>
    </div>
</div>

@code {
    public AllOrders Order { get; set; }
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private AllOrders selectedItem1 = null;
    HttpClient httpClient = new HttpClient();
    private List<AllOrders> allOrders = new List<AllOrders>();
    private bool click = false;
    private readonly DialogOptions _fullScreen = new() { FullScreen = true, CloseButton = true };
    private Task OpenDialogAsync(AllOrders selectedOrder, DialogOptions options)
    {
        selectedItem1 = selectedOrder;
        var parameters = new DialogParameters
    {
        { "Orders", selectedItem1  }
    };

        return Dialog.ShowAsync<Dialog>("Edit Form",parameters, options);

    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var jwtTokenAdmin = await LocalStorage.GetItemAsync<string>("JwtTokenAdmin");
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtTokenAdmin);
            var allOrderResponse = await httpClient.GetFromJsonAsync<AllOrderResponse>("https://localhost:7122/allorder");

            if (allOrderResponse?.value != null)
            {
                allOrders = allOrderResponse.value.ToList();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Error: No data received or invalid format.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private bool FilterFunc1(AllOrders order) => FilterFunc(order, searchString1);


    private bool FilterFunc(AllOrders order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (order.username?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (order.email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (order.address?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (order.phoneno?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (order.electronicItem?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (order.statusName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (order.messageInfo?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    }

    


}

