
 @page "/"
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using OrderFlowManagementFrontend.Data;
@inject ElectronicResponse electronicsListResponse;
@inject NavigationManager Navigation
<div class="form-wrapper d-flex align-items-center justify-content-center">
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div>
            @if (flag == true)
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">Order successful</MudAlert>
            }

            <MudItem xs="12" sm="7">
                <MudCard Style="width:25vw;">
                    <MudCardContent>
                        <MudTextField Label="Name"
                                      @bind-Value="model.name" For="@(() => model.name)" />
                        <MudTextField Label="Password" Class="mt-3"
                                      @bind-Value="model.password" For="@(() => model.password)" />
                        <MudTextField Label="Email" Class="mt-3"
                                      @bind-Value="model.email" For="@(() => model.email)" />

                        <MudTextField Label="Address" Class="mt-3"
                                      @bind-Value="model.address" For="@(() => model.address)" />


                        <MudTextField Label="Phone Number" Class="mt-3" HelperText="Max. 10 Digit"
                                      @bind-Value="model.phoneNo" For="@(() => model.phoneNo)" />

                        <MudSelect @bind-Value="selectedElectronics" Label="Electronic Items" Variant="Variant.Outlined" style="margin-top:9%">

                            @foreach (var e in electronic)
                            {
                                <MudSelectItem Value="@e">
                                    <p>@e</p>
                                </MudSelectItem>
                            }

                        </MudSelect>



                    </MudCardContent>





                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Style="background-color:#85ea2d; color:black">Order Now</MudButton>
                    </MudCardActions>


                </MudCard>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Fill out the form correctly to see the success message.
                </MudText>
            </MudItem>
        </div>

    </EditForm>
</div>



@code {
    List<string> electronic = new List<string>{"select"};
    string selectedElectronics = "select";

    Registration model = new Registration();
    bool success;
    bool flag = false;

    public HttpClient httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            electronicsListResponse = await httpClient.GetFromJsonAsync<ElectronicResponse>("https://localhost:7122/getAllElectronics");
            electronic = electronicsListResponse.value.Select(e => e.name).ToList();
            base.OnInitializedAsync();
        }
        catch (Exception e)
        {

        }

    }


    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7122/addUser", model);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
                DateTime now = DateTime.Now;
                var eIndex = electronic.IndexOf(selectedElectronics);
                var eId = 0;
                if (eIndex >= 0)
                {
                    eId = electronicsListResponse.value[eIndex].id;
                }
                var order = new Order
                    {
                        UserInfoId = result.id,
                        ElectronicId = eId,
                        StatusId = 1,
                        MessageInfo = "Your Order Message Here",
                        OrderDate = now
                    };

                var orderResponse = await httpClient.PostAsJsonAsync("https://localhost:7122/order", order);

            }

          //  var user = await httpClient.GetFromJsonAsync<RegistrationResponse>($"https://localhost:7122/GetUserByEmail/{model.Email}");
            
       
                flag = !flag;
            StateHasChanged();
            await Task.Delay(3000);
            Navigation.NavigateTo("/allorders");
            
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error during submission: {ex.Message}");
        }
        StateHasChanged();
    }


}