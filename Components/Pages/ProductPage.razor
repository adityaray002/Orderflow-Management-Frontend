
@page "/Products"
@using OrderFlowManagementFrontend.Data;
@inject ProductsResponse productResponse
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
<h5>> All Products</h5>

@if (flag == true)
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Filled">Order successful</MudAlert>
}
    <div class="">

        <div>
            <div class=" d-flex justify-content-start flex-wrap ">
                @if (@product != null && @product.Count > 0)
                {
                @foreach (var item in product)
                {
                    <MudCard style="width:20%;margin:33px;">
                        <MudCardMedia Image="@item.image" style="object-fit:cover;" Height="150" />
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@item.name</MudText>
                            <MudText Typo="Typo.body2">@item.description</MudText>
                        </MudCardContent>
                        <MudCardActions Style="justify-content:space-between;">
                            <a><p style="font-size:larger; font-weight:bolder; margin-left:10px;margin-top:10px;">$@item.price</p></a>
                            <MudButton Color="Color.Info" Variant="Variant.Filled" Style="background-color:#85ea2d; color:black; " OnClick="() => BuyProduct(item.id)">Buy</MudButton>
                        </MudCardActions>
                    </MudCard>
                }
                }


            </div>


        </div>

    </div>



@code {
    HttpClient httpClient = new HttpClient();
    public List<Products> product = new List<Products>();
    bool flag = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<ProductsResponse>("https://localhost:7122/getAllProducts");
            if (response.value != null)
            {
                product = response.value.ToList();
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error fetching data: {e.Message}");
        }

    }
    public async void BuyProduct(int eid)
    {
        DateTime now = DateTime.Now;
        var userId = await LocalStorage.GetItemAsync<string>("UserId");
        var order = new Order
            {
                UserInfoId = int.Parse(userId), 
                ProductId = eid,
                StatusId = 1,
                MessageInfo = "Your Order Message Here",
                OrderDate = now
            };

        var orderResponse = await httpClient.PostAsJsonAsync("https://localhost:7122/order", order);

        flag = !flag;
        StateHasChanged();
        await Task.Delay(2000);
        Navigation.NavigateTo("/allorders");
    }

}



